import {
  getFirestore,
  collection,
  doc,
  writeBatch,
  getDoc,
} from "firebase/firestore";
// import { auth } from "../firebase"; // <-- Убираем неиспользуемый импорт

// Этот скрипт создаст структуру курсов с модулями, уроками и этапами
// Запускать его нужно только один раз для инициализации

// Пример данных курса с модулями, уроками и этапами
const coursesData = [
  {
    id: "programming-basics", // ID курса для ссылок
    title: "Основы программирования",
    description:
      "Изучите фундаментальные концепции программирования на примере JavaScript",
    category: "Программирование",
    thumbnail: "programming-basics.jpg",
    totalLessons: 15, // Общее количество уроков для расчета прогресса
    modules: [
      {
        id: "module-1",
        title: "Введение в программирование",
        description: "Изучите что такое программирование и основные концепции",
        lessons: [
          {
            id: "lesson-1-1",
            title: "Что такое программирование?",
            description: "Знакомство с миром программирования",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Что такое программирование",
                content:
                  "Программирование — это процесс создания компьютерных программ с помощью языков программирования. По сути, это способ общения с компьютером, чтобы он выполнял нужные нам задачи.",
              },
              {
                order: 1,
                type: "practice_mcq", // Multiple Choice Question
                title: "Проверка понимания",
                content:
                  "Что из перечисленного НЕ является языком программирования?",
                options: ["JavaScript", "Python", "HTML", "C++"],
                correctAnswer: 2, // Индекс правильного ответа (HTML)
                explanation:
                  "HTML — это язык разметки, который используется для создания структуры веб-страниц, а не язык программирования.",
              },
              {
                order: 2,
                type: "theory",
                title: "Зачем нужно программирование",
                content:
                  "Программирование позволяет создавать программы и приложения, которые решают конкретные задачи. Благодаря программированию возможно создание веб-сайтов, мобильных приложений, игр и многого другого.",
              },
              {
                order: 3,
                type: "practice_fill_blank",
                title: "Заполните пропуск",
                content:
                  "С помощью программирования можно создавать _______, игры и приложения.",
                correctAnswer: "веб-сайты",
                explanation:
                  "Программирование используется для создания различных программных продуктов, включая веб-сайты.",
              },
              {
                order: 4,
                type: "theory",
                title: "Как работает программа",
                content:
                  "Программы — это набор инструкций, которые компьютер выполняет последовательно. Компьютер не понимает человеческий язык, поэтому инструкции записываются на языках программирования, которые затем преобразуются в машинный код.",
              },
              {
                order: 5,
                type: "practice_code_input",
                title: "Ваш первый код",
                content:
                  "Напишите команду для вывода текста 'Привет, мир!' на JavaScript",
                correctAnswer: "console.log('Привет, мир!');",
                explanation:
                  "console.log() — это функция, которая выводит текст или значение переменной в консоль.",
              },
              {
                order: 6,
                type: "theory",
                title: "Подведем итоги",
                content:
                  "В этом уроке мы познакомились с программированием, узнали что это такое и зачем оно нужно. В следующих уроках мы углубимся в детали и начнем писать больше кода.",
              },
            ],
          },
          {
            id: "lesson-1-2",
            title: "Переменные и типы данных",
            description:
              "Изучите, что такое переменные и какие бывают типы данных",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Что такое переменные?",
                content:
                  "Переменные - это именованные контейнеры для хранения данных в программе. Представьте их как коробки с этикетками, куда можно что-то положить.",
              },
              {
                order: 1,
                type: "theory",
                title: "Объявление переменных (let, const, var)",
                content:
                  "В JavaScript переменные объявляются с помощью ключевых слов: `let` (для изменяемых переменных), `const` (для констант, которые нельзя переназначить) и `var` (старый способ, лучше использовать `let` или `const`).\nПример: `let age = 25; const PI = 3.14;`",
              },
              {
                order: 2,
                type: "practice_mcq",
                title: "Проверка: Объявление",
                content:
                  "Какое ключевое слово используется для объявления переменной, значение которой НЕЛЬЗЯ изменить позже?",
                options: ["var", "let", "const", "set"],
                correctAnswer: 2,
                explanation:
                  "`const` используется для объявления констант, значения которых не могут быть переназначены после инициализации.",
              },
              {
                order: 3,
                type: "theory",
                title: "Типы данных: Числа и Строки",
                content:
                  "Основные типы данных: `Number` (числа, например, `10`, `3.14`) и `String` (строки текста, например, `'Привет'` или `\"Мир\"`). Строки заключаются в одинарные или двойные кавычки.",
              },
              {
                order: 4,
                type: "practice_fill_blank",
                title: "Проверка: Типы данных",
                content:
                  "Тип данных для текста, как 'Hello', называется ______.",
                correctAnswer: "String",
                explanation:
                  "Строки (String) используются для представления текстовых данных.",
              },
              {
                order: 5,
                type: "theory",
                title: "Типы данных: Булевы значения",
                content:
                  "Булев тип (`Boolean`) имеет только два значения: `true` (истина) и `false` (ложь). Они часто используются в условиях.",
              },
              {
                order: 6,
                type: "practice_code_input",
                title: "Практика: Объявление",
                content:
                  "Объявите константу `MAX_USERS` и присвойте ей числовое значение `100`.",
                correctAnswer: "const MAX_USERS = 100;",
                explanation:
                  "Используем `const` для константы, `MAX_USERS` как имя и присваиваем `100`.",
              },
              {
                order: 7,
                type: "theory",
                title: "Итог",
                content:
                  "Мы изучили переменные (`let`, `const`), числа (`Number`), строки (`String`) и булевы значения (`Boolean`). Это основа для работы с данными в JavaScript!",
              },
            ],
          },
        ],
      },
      {
        id: "module-2",
        title: "Основные конструкции",
        description:
          "Изучите основные конструкции программирования: условия и циклы",
        lessons: [
          {
            id: "lesson-2-1",
            title: "Условные операторы",
            description:
              "Изучите как принимать решения в коде с помощью условий",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Зачем нужны условия? Оператор if",
                content:
                  "Часто в программах нужно выполнять разные действия в зависимости от ситуации. Например, показать сообщение об ошибке, если пользователь ввел неверный пароль. Для этого используются условные операторы. \nСамый главный - это `if`. Он проверяет условие в скобках `()`. Если условие истинно (`true`), выполняется код внутри фигурных скобок `{}`.\n`if (условие) { // код, если условие true }`",
              },
              {
                order: 1,
                type: "practice_mcq",
                title: "Проверка: if",
                content:
                  "Какой код будет выполнен? `let age = 20; if (age > 18) { console.log('Совершеннолетний'); }`",
                options: [
                  "Никакой",
                  "console.log('Совершеннолетний')",
                  "Будет ошибка",
                ],
                correctAnswer: 1,
                explanation:
                  "Условие `age > 18` (20 > 18) истинно, поэтому код внутри `{}` выполнится.",
              },
              {
                order: 2,
                type: "theory",
                title: "А если условие ложно? Оператор else",
                content:
                  "Что если условие в `if` оказалось ложным (`false`)? Чтобы выполнить другой код в этом случае, используется `else`. Он идет сразу после `if`.\n`if (условие) { // код, если true } else { // код, если false }`",
              },
              {
                order: 3,
                type: "practice_code_input",
                title: "Практика: if-else",
                content:
                  "Напишите код: если переменная `isLoggedIn` равна `true`, вывести 'Вход выполнен', иначе - 'Войдите в систему'. Считайте, что `isLoggedIn` уже объявлена.",
                correctAnswer:
                  "if (isLoggedIn) {\n  console.log('Вход выполнен');\n} else {\n  console.log('Войдите в систему');\n}", 
                explanation:
                  "Используем `if (isLoggedIn)` для проверки `true`, и `else` для случая `false`.",
              },
              {
                order: 4,
                type: "theory",
                title: "Несколько условий: else if",
                content:
                  "Иногда нужно проверить несколько условий подряд. Для этого после `if` можно добавить `else if`. \n`if (условие1) { // код 1 } else if (условие2) { // код 2 } else { // код, если все условия false }`\nПроверка идет по порядку. Как только найдется истинное условие, выполнится его код, и остальные `else if` и `else` проигнорируются.",
              },
              {
                order: 5,
                type: "practice_fill_blank",
                title: "Практика: else if",
                content:
                  "Дополните код для проверки оценки: `let grade = 4; if (grade === 5) { console.log('Отлично'); } ____ (grade === 4) { console.log('Хорошо'); } else { console.log('Учиться!'); }`",
                correctAnswer: "else if",
                explanation:
                  "`else if` используется для проверки второго условия, если первое (`grade === 5`) ложно.",
              },
              {
                order: 6,
                type: "practice_mcq",
                title: "Проверка: Порядок выполнения",
                content:
                  "Что выведется в консоль? `let x = 10; if (x > 5) { console.log('A'); } else if (x > 0) { console.log('B'); } else { console.log('C'); }`",
                options: ["A", "B", "C", "A и B"],
                correctAnswer: 0,
                explanation:
                  "Первое же условие `x > 5` (10 > 5) истинно. Выполняется его блок (`console.log('A')`), а остальные `else if` и `else` игнорируются.",
              },
              {
                order: 7,
                type: "theory",
                title: "Итог по условиям",
                content:
                  "Мы рассмотрели `if`, `else` и `else if`. Эти конструкции позволяют вашей программе принимать решения и выполнять разный код в зависимости от ситуации. Это фундаментальная часть программирования!",
              },
            ],
          },
          {
            id: "lesson-2-2",
            title: "Циклы",
            description: "Повторение действий с помощью циклов",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Зачем нужны циклы? Цикл for",
                content:
                  "Представьте, что вам нужно вывести числа от 1 до 5. Писать `console.log(1)`, `console.log(2)` и т.д. неудобно. Циклы позволяют повторять один и тот же код много раз.\nСамый частый цикл - `for`. Его синтаксис: `for (инициализация; условие; шаг) { // тело цикла }`\n- **Инициализация:** Выполняется один раз перед началом цикла (обычно объявление счетчика, `let i = 0`).\n- **Условие:** Проверяется перед каждой итерацией. Если `true` - цикл продолжается, если `false` - заканчивается.\n- **Шаг:** Выполняется после каждой итерации (обычно изменение счетчика, `i++`).\n- **Тело цикла:** Код, который повторяется.",
              },
              {
                order: 1,
                type: "practice_fill_blank",
                title: "Практика: Части for",
                content:
                  "В цикле `for (let i = 0; i < 10; i++)`, какая часть отвечает за проверку продолжения цикла? `let i = 0; ______; i++`",
                correctAnswer: "i < 10",
                explanation:
                  "Условие `i < 10` проверяется перед каждой итерацией.",
              },
              {
                order: 2,
                type: "theory",
                title: "Пример: Вывод чисел",
                content:
                  "Выведем числа от 0 до 4:\n`for (let i = 0; i < 5; i++) { console.log(i); }`\n1. `i` становится 0.\n2. Условие `0 < 5` true. Выполняем `console.log(0)`. Шаг `i++` (i=1).\n3. Условие `1 < 5` true. Выполняем `console.log(1)`. Шаг `i++` (i=2).\n4. ...\n5. Условие `4 < 5` true. Выполняем `console.log(4)`. Шаг `i++` (i=5).\n6. Условие `5 < 5` false. Цикл завершается.",
              },
              {
                order: 3,
                type: "practice_code_input",
                title: "Практика: Цикл for",
                content:
                  "Напишите цикл `for`, который выводит в консоль числа от 1 до 3 (включительно).",
                correctAnswer:
                  "for (let i = 1; i <= 3; i++) {\n  console.log(i);\n}",
                explanation: "Начинаем с `i = 1`, условие `i <= 3`, шаг `i++`.",
              },
              {
                order: 4,
                type: "theory",
                title: "Цикл while",
                content:
                  "Еще один вид цикла - `while`. Он проще: `while (условие) { // тело цикла }`\nТело цикла выполняется, пока условие истинно (`true`). Важно не забыть внутри тела изменять переменную, влияющую на условие, иначе цикл станет бесконечным!\nПример вывода чисел от 0 до 4:\n`let i = 0; while (i < 5) { console.log(i); i++; }`",
              },
              {
                order: 5,
                type: "practice_mcq",
                title: "Проверка: while",
                content:
                  "Что выведет этот код? `let count = 3; while (count > 0) { console.log(count); count--; }`",
                options: ["3, 2, 1", "3, 2, 1, 0", "3, 2", "Бесконечный цикл"],
                correctAnswer: 0,
                explanation:
                  "Цикл работает пока `count > 0`. Выводятся 3, 2, 1. Когда `count` становится 0, условие `0 > 0` ложно, цикл останавливается.",
              },
              {
                order: 6,
                type: "theory",
                title: "Итог по циклам",
                content:
                  "Циклы `for` и `while` позволяют эффективно повторять код. `for` удобен, когда известно количество итераций, `while` - когда повторение зависит от выполнения условия. Это мощные инструменты для решения многих задач!",
              },
            ],
          },
        ],
      },
      {
        id: "module-3",
        title: "Структуры данных",
        description: "Хранение и организация данных: Массивы и Объекты",
        lessons: [
          {
            id: "lesson-3-1",
            title: "Массивы",
            description: "Работа с упорядоченными коллекциями данных",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Что такое массив?",
                content:
                  "Массив - это упорядоченная коллекция элементов. Представьте список покупок или очередь. В JavaScript массивы создаются с помощью квадратных скобок `[]`, элементы перечисляются через запятую.\nПример: `let fruits = ['Яблоко', 'Банан', 'Апельсин'];`",
              },
              {
                order: 1,
                type: "theory",
                title: "Доступ к элементам. Индексы",
                content:
                  "Элементы в массиве нумеруются с **нуля**. Этот номер называется **индекс**. Чтобы получить элемент, указываем имя массива и индекс в квадратных скобках.\n`fruits[0]` вернет 'Яблоко'\n`fruits[1]` вернет 'Банан'",
              },
              {
                order: 2,
                type: "practice_mcq",
                title: "Проверка: Индексы",
                content:
                  "Какой элемент будет получен? `let colors = ['red', 'green', 'blue']; console.log(colors[2]);`",
                options: ["red", "green", "blue", "Ошибка"],
                correctAnswer: 2,
                explanation:
                  "Индекс `2` соответствует третьему элементу массива, так как нумерация начинается с 0.",
              },
              {
                order: 3,
                type: "theory",
                title: "Длина массива",
                content:
                  "Узнать количество элементов в массиве можно с помощью свойства `length`.\n`colors.length` вернет `3`.",
              },
              {
                order: 4,
                type: "practice_code_input",
                title: "Практика: Длина массива",
                content:
                  "Дан массив `let numbers = [10, 20, 30, 40];`. Напишите код для вывода его длины в консоль.",
                correctAnswer: "console.log(numbers.length);",
                explanation:
                  "Свойство `length` массива `numbers` вернет количество его элементов (4).",
              },
              {
                order: 5,
                type: "theory",
                title: "Изменение элементов и добавление",
                content:
                  "Элементы массива можно изменять по индексу: `fruits[1] = 'Киви';` (теперь массив `['Яблоко', 'Киви', 'Апельсин']`).\nДобавить элемент в конец массива можно методом `push()`: `fruits.push('Груша');`",
              },
              {
                order: 6,
                type: "practice_fill_blank",
                title: "Практика: Добавление",
                content:
                  "Какой метод используется для добавления элемента в конец массива? `myArray.____('новый элемент');`",
                correctAnswer: "push",
                explanation:
                  "Метод `push()` добавляет один или несколько элементов в конец массива.",
              },
              {
                order: 7,
                type: "theory",
                title: "Итог по массивам",
                content:
                  "Массивы позволяют хранить упорядоченные коллекции данных и легко получать к ним доступ по индексу. Это очень полезная структура данных!",
              },
            ],
          },
          {
            id: "lesson-3-2",
            title: "Объекты",
            description: "Хранение данных в формате ключ-значение",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Что такое объект?",
                content:
                  "Объект - это неупорядоченная коллекция пар **ключ-значение**. Ключ (или свойство) - это строка, а значение - любые данные (число, строка, другой объект, массив и т.д.). Объекты создаются с помощью фигурных скобок `{}`.\nПример: `let user = { name: 'Иван', age: 30, isAdmin: true };`",
              },
              {
                order: 1,
                type: "theory",
                title: "Доступ к свойствам",
                content:
                  "Получить значение свойства можно двумя способами:\n1. Через точку: `user.name` вернет 'Иван'.\n2. Через квадратные скобки: `user['age']` вернет 30. Этот способ нужен, если ключ содержит пробелы или является переменной.",
              },
              {
                order: 2,
                type: "practice_mcq",
                title: "Проверка: Доступ через точку",
                content:
                  "Как получить значение свойства `city` из объекта `let address = { street: 'Ленина', city: 'Москва' };`?",
                options: [
                  "address[city]",
                  "address.city",
                  "address('city')",
                  "city.address",
                ],
                correctAnswer: 1,
                explanation:
                  "Доступ через точку `object.property` является стандартным способом.",
              },
              {
                order: 3,
                type: "theory",
                title: "Изменение и добавление свойств",
                content:
                  "Значения свойств можно изменять: `user.age = 31;`.\nНовые свойства можно добавлять так же: `user.city = 'Санкт-Петербург';`",
              },
              {
                order: 4,
                type: "practice_code_input",
                title: "Практика: Добавление свойства",
                content:
                  "Дан объект `let car = { brand: 'Toyota' };`. Добавьте ему свойство `color` со значением `'red'`.",
                correctAnswer: "car.color = 'red';",
                explanation:
                  "Просто присваиваем значение новому свойству `color` объекта `car`.",
              },
              {
                order: 5,
                type: "theory",
                title: "Итог по объектам",
                content:
                  "Объекты идеально подходят для представления сущностей с набором характеристик (пользователь, товар, заказ). Они позволяют удобно структурировать данные с помощью именованных ключей.",
              },
            ],
          },
        ],
      },
      {
        id: "module-4",
        title: "Функции",
        description: "Создание переиспользуемых блоков кода",
        lessons: [
          {
            id: "lesson-4-1",
            title: "Основы функций",
            description: "Объявление, вызов, параметры и возврат значений",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Что такое функция?",
                content:
                  "Функция - это блок кода, который можно вызывать (запускать) много раз. Это помогает избежать повторения кода и делает программу более организованной. \nФункции объявляются с помощью ключевого слова `function`, затем идет имя функции, скобки `()` для параметров и фигурные скобки `{}` для тела функции.\n`function greet() { console.log('Привет!'); }`",
              },
              {
                order: 1,
                type: "theory",
                title: "Вызов функции",
                content:
                  "Чтобы выполнить код внутри функции, ее нужно **вызвать**. Для этого пишем имя функции и добавляем круглые скобки `()`.\n`greet();` вызовет функцию выше и выведет 'Привет!'.",
              },
              {
                order: 2,
                type: "practice_code_input",
                title: "Практика: Вызов функции",
                content:
                  "Дана функция `function sayBye() { console.log('Пока!'); }`. Напишите код для ее вызова.",
                correctAnswer: "sayBye();",
                explanation:
                  "Вызов функции осуществляется указанием ее имени и круглых скобок.",
              },
              {
                order: 3,
                type: "theory",
                title: "Параметры функции",
                content:
                  "Функции могут принимать **параметры** (входные данные). Они перечисляются в круглых скобках при объявлении. При вызове функции мы передаем **аргументы** - конкретные значения для этих параметров.\n`function greetUser(name) { console.log('Привет, ' + name + '!'); }`\n`greetUser('Анна');` выведет 'Привет, Анна!'. Здесь `name` - параметр, 'Анна' - аргумент.",
              },
              {
                order: 4,
                type: "practice_mcq",
                title: "Проверка: Параметры",
                content:
                  "Что такое `userName` в коде `function showMessage(userName) { /*...*/ }`?",
                options: ["Аргумент", "Переменная", "Параметр", "Тип данных"],
                correctAnswer: 2,
                explanation:
                  "`userName` - это параметр, который функция ожидает получить при вызове.",
              },
              {
                order: 5,
                type: "theory",
                title: "Возврат значения: return",
                content:
                  "Функции могут не только выполнять действия, но и **возвращать** результат своей работы с помощью ключевого слова `return`. После `return` выполнение функции прекращается.\n`function add(a, b) { return a + b; }`\n`let sum = add(5, 3); // sum будет равно 8`",
              },
              {
                order: 6,
                type: "practice_code_input",
                title: "Практика: return",
                content:
                  "Напишите функцию `multiply` которая принимает два параметра и возвращает их произведение.",
                correctAnswer: "function multiply(a, b) {\n  return a * b;\n}",
                explanation:
                  "Функция `multiply` принимает `a` и `b`, и использует `return`, чтобы вернуть результат `a * b`.",
              },
              {
                order: 7,
                type: "theory",
                title: "Итог по функциям",
                content:
                  "Функции - это строительные блоки программы. Они позволяют делить код на логические части, избегать повторений и делать код более читаемым и поддерживаемым. Мы рассмотрели объявление, вызов, параметры и возврат значений.",
              },
            ],
          },
        ],
      },
    ],
  },
  // Второй курс (можете добавить больше курсов)
  {
    id: "web-development",
    title: "Веб-разработка",
    description:
      "Научитесь создавать современные веб-сайты с помощью HTML, CSS и JavaScript",
    category: "Web-разработка",
    thumbnail: "web-development.jpg",
    totalLessons: 20,
    modules: [
      {
        id: "module-1",
        title: "HTML Основы",
        lessons: [
          {
            id: "l1-1",
            title: "Структура документа",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Заглушка",
                content: "Здесь будет теория по структуре HTML...",
              },
            ],
          },
          {
            id: "l1-2",
            title: "Теги и атрибуты",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Заглушка",
                content: "Здесь будет теория по тегам...",
              },
            ],
          },
        ],
      },
      {
        id: "module-2",
        title: "CSS Стилизация",
        lessons: [
          { id: "l2-1", title: "Селекторы и свойства", stages: [] },
          { id: "l2-2", title: "Flexbox", stages: [] },
        ],
      },
      {
        id: "web-dev-module-3",
        title: "JavaScript Введение",
        lessons: [{ id: "l3-1", title: "DOM Манипуляции", stages: [] }],
      },
    ],
  },
  // --- Добавляем недостающие курсы ---
  {
    id: "javascript",
    title: "Углубленный JavaScript",
    description: "Погрузитесь в продвинутые концепции JavaScript",
    category: "Программирование",
    thumbnail: "javascript.jpg",
    totalLessons: 25, // Примерное количество
    modules: [
      {
        id: "module-1",
        title: "Функции",
        lessons: [
          {
            id: "l1-1",
            title: "Замыкания",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Заглушка",
                content: "Здесь будет теория про замыкания...",
              },
            ],
          },
        ],
      },
      {
        id: "module-2",
        title: "Асинхронность",
        lessons: [
          { id: "l2-1", title: "Promise", stages: [] },
          { id: "l2-2", title: "Async/Await", stages: [] },
        ],
      },
    ],
  },
  {
    id: "nodejs",
    title: "Node.js для начинающих",
    description: "Создание серверных приложений на Node.js",
    category: "Программирование",
    thumbnail: "nodejs.png",
    totalLessons: 18, // Примерное количество
    modules: [
      {
        id: "module-1",
        title: "Введение в Node.js",
        lessons: [
          {
            id: "l1-1",
            title: "Модули npm",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Заглушка",
                content: "Здесь будет теория про npm...",
              },
            ],
          },
        ],
      },
      {
        id: "module-2",
        title: "Express.js",
        lessons: [{ id: "l2-1", title: "Маршрутизация", stages: [] }],
      },
    ],
  },
  {
    id: "python",
    title: "Python для анализа данных",
    description: "Основы Python и библиотеки Pandas, NumPy",
    category: "Программирование",
    thumbnail: "course1.png", // Используем существующую картинку
    totalLessons: 30, // Примерное количество
    modules: [
      {
        id: "module-1",
        title: "Основы Python",
        lessons: [
          {
            id: "l1-1",
            title: "Типы данных",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Заглушка",
                content: "Здесь будет теория про типы данных Python...",
              },
            ],
          },
        ],
      },
      {
        id: "module-2",
        title: "Pandas",
        lessons: [{ id: "l2-1", title: "DataFrame", stages: [] }],
      },
    ],
  },
  {
    id: "graphic-design",
    title: "Графический дизайн",
    description: "Основы дизайна и работа с Figma",
    category: "Дизайн",
    thumbnail: "course2.png", // Используем существующую картинку
    totalLessons: 15, // Примерное количество
    modules: [
      {
        id: "module-1",
        title: "Введение в Figma",
        lessons: [
          {
            id: "l1-1",
            title: "Интерфейс",
            stages: [
              {
                order: 0,
                type: "theory",
                title: "Заглушка",
                content: "Здесь будет теория про интерфейс Figma...",
              },
            ],
          },
        ],
      },
      {
        id: "module-2",
        title: "Композиция",
        lessons: [{ id: "l2-1", title: "Сетка", stages: [] }],
      },
    ],
  },
];

// Функция для инициализации базы данных
const initializeDatabase = async () => {
  const db = getFirestore();
  console.log("Попытка инициализации базы данных...");

  // --- ТЕСТ: Попытка чтения перед записью ---
  try {
    console.log("Тестовое чтение документа courses/programming-basics...");
    const testDocRef = doc(db, "courses", "programming-basics");
    const testDocSnap = await getDoc(testDocRef);
    if (testDocSnap.exists()) {
      console.log(
        "Тестовое чтение успешно, документ существует.",
        testDocSnap.data()
      );
    } else {
      console.log("Тестовое чтение успешно, документ не существует.");
    }
  } catch (readError) {
    console.error("!!! ОШИБКА при тестовом чтении:", readError);
  }

  try {
    console.log("Подготовка батча для записи...");
    const batch = writeBatch(db); // Используем батч для групповой записи

    // Добавляем каждый курс
    for (const course of coursesData) {
      const courseRef = doc(collection(db, "courses"), course.id);
      batch.set(courseRef, {
        title: course.title,
        description: course.description,
        category: course.category,
        thumbnail: course.thumbnail,
        totalLessons: course.totalLessons,
        modules: course.modules,
      });
      console.log(`Подготовлен курс: ${course.title}`);
    }

    // Записываем все изменения в базу данных
    console.log("Отправка батча в Firebase...");
    await batch.commit();
    console.log("База данных курсов успешно инициализирована!");
  } catch (error) {
    // Ловим ошибку записи
    console.error("!!! ОШИБКА при записи данных:", error); // Изменяем сообщение
    // Не выбрасываем ошибку дальше, чтобы увидеть лог чтения
    // throw error;
  }
};

// Экспортируем функцию
export default initializeDatabase;
